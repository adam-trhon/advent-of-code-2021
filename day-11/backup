
#[cfg(test)]
mod tests {
    use super::*;

    fn state_0() -> Map {
        vec![
            vec![5, 4, 8, 3, 1, 4, 3, 2, 2, 3],
            vec![2, 7, 4, 5, 8, 5, 4, 7, 1, 1],
            vec![5, 2, 6, 4, 5, 5, 6, 1, 7, 3],
            vec![6, 1, 4, 1, 3, 3, 6, 1, 4, 6],
            vec![6, 3, 5, 7, 3, 8, 5, 4, 7, 8],
            vec![4, 1, 6, 7, 5, 2, 4, 6, 4, 5],
            vec![2, 1, 7, 6, 8, 4, 1, 7, 2, 1],
            vec![6, 8, 8, 2, 8, 8, 1, 1, 3, 4],
            vec![4, 8, 4, 6, 8, 4, 8, 5, 5, 4],
            vec![5, 2, 8, 3, 7, 5, 1, 5, 2, 6],
        ]
    }

    fn state_1() -> Map {
        vec![
            vec![6, 5, 9, 4, 2, 5, 4, 3, 3, 4],
            vec![3, 8, 5, 6, 9, 6, 5, 8, 2, 2],
            vec![6, 3, 7, 5, 6, 6, 7, 2, 8, 4],
            vec![7, 2, 5, 2, 4, 4, 7, 2, 5, 7],
            vec![7, 4, 6, 8, 4, 9, 6, 5, 8, 9],
            vec![5, 2, 7, 8, 6, 3, 5, 7, 5, 6],
            vec![3, 2, 8, 7, 9, 5, 2, 8, 3, 2],
            vec![7, 9, 9, 3, 9, 9, 2, 2, 4, 5],
            vec![5, 9, 5, 7, 9, 5, 9, 6, 6, 5],
            vec![6, 3, 9, 4, 8, 6, 2, 6, 3, 7],
        ]
    }

    fn state_2() -> Map {
        vec![
            vec![8, 8, 0, 7, 4, 7, 6, 5, 5, 5],
            vec![5, 0, 8, 9, 0, 8, 7, 0, 5, 4],
            vec![8, 5, 9, 7, 8, 8, 9, 6, 0, 8],
            vec![8, 4, 8, 5, 7, 6, 9, 6, 0, 0],
            vec![8, 7, 0, 0, 9, 0, 8, 8, 0, 0],
            vec![6, 6, 0, 0, 0, 8, 8, 9, 8, 9],
            vec![6, 8, 0, 0, 0, 0, 5, 9, 4, 3],
            vec![0, 0, 0, 0, 0, 0, 7, 4, 5, 6],
            vec![9, 0, 0, 0, 0, 0, 0, 8, 7, 6],
            vec![8, 7, 0, 0, 0, 0, 6, 8, 4, 8],
        ]
    }

    fn state_3() -> Map {
        vec![
            vec![0, 0, 5, 0, 9, 0, 0, 8, 6, 6],
            vec![8, 5, 0, 0, 8, 0, 0, 5, 7, 5],
            vec![9, 9, 0, 0, 0, 0, 0, 0, 3, 9],
            vec![9, 7, 0, 0, 0, 0, 0, 0, 4, 1],
            vec![9, 9, 3, 5, 0, 8, 0, 0, 6, 3],
            vec![7, 7, 1, 2, 3, 0, 0, 0, 0, 0],
            vec![7, 9, 1, 1, 2, 5, 0, 0, 0, 9],
            vec![2, 2, 1, 1, 1, 3, 0, 0, 0, 0],
            vec![0, 4, 2, 1, 1, 2, 5, 0, 0, 0],
            vec![0, 0, 2, 1, 1, 1, 9, 0, 0, 0],
        ]
    }

    fn state_4() -> Map {
        vec![
            vec![2, 2, 6, 3, 0, 3, 1, 9, 7, 7],
            vec![0, 9, 2, 3, 0, 3, 1, 6, 9, 7],
            vec![0, 0, 3, 2, 2, 2, 1, 1, 5, 0],
            vec![0, 0, 4, 1, 1, 1, 1, 1, 6, 3],
            vec![0, 0, 7, 6, 1, 9, 1, 1, 7, 4],
            vec![0, 0, 5, 3, 4, 1, 1, 1, 2, 2],
            vec![0, 0, 4, 2, 3, 6, 1, 1, 2, 0],
            vec![5, 5, 3, 2, 2, 4, 1, 1, 2, 2],
            vec![1, 5, 3, 2, 2, 4, 7, 2, 1, 1],
            vec![1, 1, 3, 2, 2, 3, 0, 2, 1, 1],
        ]
    }

#[test]
    fn test_simulate_10_steps() {
        assert_eq!(simulate_steps(&mut state_0(), 10).len(), 204);
    }

#[test]
    fn test_simulate_step_1() {
        let mut map = state_0();
        assert_eq!(simulate_step(&mut map).len(), 0);
        assert_eq!(map, state_1());
    }

}
